// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20220217081253_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Security.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "moderator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "user"
                        });
                });

            modelBuilder.Entity("Core.Security.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordSalt");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Core.Security.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int")
                        .HasColumnName("OperationClaimId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Renault"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Honda"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Toyota"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarState")
                        .HasColumnType("int")
                        .HasColumnName("State");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("ColorId");

                    b.Property<short>("FindexScore")
                        .HasColumnType("smallint");

                    b.Property<int>("Kilometer")
                        .HasColumnType("int")
                        .HasColumnName("Kilometer");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("ModelId");

                    b.Property<short>("ModelYear")
                        .HasColumnType("smallint")
                        .HasColumnName("ModelYear");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Plate");

                    b.Property<int>("RentalOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("RentalOfficeId");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ModelId");

                    b.HasIndex("RentalOfficeId");

                    b.ToTable("Cars", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarState = 1,
                            ColorId = 1,
                            FindexScore = (short)1500,
                            Kilometer = 100000,
                            ModelId = 1,
                            ModelYear = (short)2015,
                            Plate = "05avv05",
                            RentalOfficeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CarState = 2,
                            ColorId = 2,
                            FindexScore = (short)1300,
                            Kilometer = 200000,
                            ModelId = 1,
                            ModelYear = (short)2014,
                            Plate = "05abb06",
                            RentalOfficeId = 2
                        },
                        new
                        {
                            Id = 3,
                            CarState = 2,
                            ColorId = 1,
                            FindexScore = (short)1400,
                            Kilometer = 300000,
                            ModelId = 1,
                            ModelYear = (short)2009,
                            Plate = "05acc12",
                            RentalOfficeId = 1
                        },
                        new
                        {
                            Id = 4,
                            CarState = 3,
                            ColorId = 3,
                            FindexScore = (short)1400,
                            Kilometer = 300000,
                            ModelId = 2,
                            ModelYear = (short)2018,
                            Plate = "05acd033",
                            RentalOfficeId = 3
                        },
                        new
                        {
                            Id = 5,
                            CarState = 1,
                            ColorId = 4,
                            FindexScore = (short)1450,
                            Kilometer = 300000,
                            ModelId = 4,
                            ModelYear = (short)2016,
                            Plate = "05acd036",
                            RentalOfficeId = 4
                        });
                });

            modelBuilder.Entity("Domain.Entities.CarDamage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("CarId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsFixed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsFixed");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarDamages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            Description = "Engine Overheat",
                            IsFixed = true
                        },
                        new
                        {
                            Id = 2,
                            CarId = 3,
                            Description = "Front panel broken",
                            IsFixed = true
                        },
                        new
                        {
                            Id = 3,
                            CarId = 3,
                            Description = "Engine oil is changed",
                            IsFixed = true
                        },
                        new
                        {
                            Id = 4,
                            CarId = 2,
                            Description = "Brake pads changed",
                            IsFixed = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Colors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Gray"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CorporateCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyName");

                    b.Property<string>("CompanyShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerId");

                    b.Property<string>("TaxNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TaxNo");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CorporateCustomers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "CorporateCustomer1",
                            CompanyShortName = "",
                            CustomerId = 2,
                            TaxNo = "1233213123"
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "CorporateCustomer2",
                            CompanyShortName = "ab2",
                            CustomerId = 1,
                            TaxNo = "1233213214"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Turkey"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContactEmail");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContactNumber");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactEmail = "burakibrahim@gmail1.com",
                            ContactNumber = "123456789"
                        },
                        new
                        {
                            Id = 2,
                            ContactEmail = "burakibrahim@gmail2.com",
                            ContactNumber = "223456781"
                        },
                        new
                        {
                            Id = 3,
                            ContactEmail = "burakibrahim@gmail3.com",
                            ContactNumber = "323000789"
                        },
                        new
                        {
                            Id = 4,
                            ContactEmail = "burakibrahim@gmail4.com",
                            ContactNumber = "423666781"
                        });
                });

            modelBuilder.Entity("Domain.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("ProvinceId");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Altındağ",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ayaş",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bala",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 4,
                            Name = "Beypazarı",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 5,
                            Name = "Çamlıdere",
                            ProvinceId = 7
                        },
                        new
                        {
                            Id = 6,
                            Name = "Çankaya",
                            ProvinceId = 7
                        },
                        new
                        {
                            Id = 7,
                            Name = "Çubuk",
                            ProvinceId = 7
                        },
                        new
                        {
                            Id = 8,
                            Name = "Elmadağ",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 9,
                            Name = "Güdül",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 10,
                            Name = "Kalecik",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 11,
                            Name = "Kızılcahamam",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 12,
                            Name = "Haymana",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 13,
                            Name = "Nallıhan",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 14,
                            Name = "Polatlı",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 15,
                            Name = "Şereflikoçhisar",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 16,
                            Name = "Yenimahalle",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 17,
                            Name = "Gölbaşı",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 18,
                            Name = "Keçiören",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 19,
                            Name = "Mamak",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 20,
                            Name = "Sincan",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 21,
                            Name = "Kazan",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 22,
                            Name = "Akyurt",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 23,
                            Name = "Etimesgut",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 24,
                            Name = "Evren",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 25,
                            Name = "Pursaklar",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 26,
                            Name = "Adalar",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 27,
                            Name = "Bakırköy",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 28,
                            Name = "Beşiktaş",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 29,
                            Name = "Beykoz",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 30,
                            Name = "Beyoğlu",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 31,
                            Name = "Çatalca",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 32,
                            Name = "Eyüp",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 33,
                            Name = "Fatih",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 34,
                            Name = "Gaziosmanpaşa",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 35,
                            Name = "Kadıköy",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 36,
                            Name = "Kartal",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 37,
                            Name = "Sarıyer",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 38,
                            Name = "Silivri",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 39,
                            Name = "Şile",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 40,
                            Name = "Şişli",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 41,
                            Name = "Üsküdar",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 42,
                            Name = "Zeytinburnu",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 43,
                            Name = "Büyükçekmece",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 44,
                            Name = "Kağıthane",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 45,
                            Name = "Küçükçekmece",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 46,
                            Name = "Pendik",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 47,
                            Name = "Ümraniye",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 48,
                            Name = "Bayrampaşa",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 49,
                            Name = "Avcılar",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 50,
                            Name = "Bağcılar",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 51,
                            Name = "Bahçelievler",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 52,
                            Name = "Güngören",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 53,
                            Name = "Maltepe",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 54,
                            Name = "Sultanbeyli",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 55,
                            Name = "Tuzla",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 56,
                            Name = "Esenler",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 57,
                            Name = "Arnavutköy",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 58,
                            Name = "Ataşehir",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 59,
                            Name = "Başakşehir",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 60,
                            Name = "Beylikdüzü",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 61,
                            Name = "Çekmeköy",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 62,
                            Name = "Esenyurt",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 63,
                            Name = "Sancaktepe",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 64,
                            Name = "Sultangazi",
                            ProvinceId = 34
                        },
                        new
                        {
                            Id = 65,
                            Name = "Aliağa",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 66,
                            Name = "Bayındır",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 67,
                            Name = "Bergama",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 68,
                            Name = "Bornova",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 69,
                            Name = "Çeşme",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 70,
                            Name = "Dikili",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 71,
                            Name = "Foça",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 72,
                            Name = "Karaburun",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 73,
                            Name = "Karşıyaka",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 74,
                            Name = "Kemalpaşa",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 75,
                            Name = "Kınık",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 76,
                            Name = "Kiraz",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 77,
                            Name = "Menemen",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 78,
                            Name = "Ödemiş",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 79,
                            Name = "Seferihisar",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 80,
                            Name = "Selçuk",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 81,
                            Name = "Tire",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 82,
                            Name = "Torbalı",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 83,
                            Name = "Urla",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 84,
                            Name = "Beydağ",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 85,
                            Name = "Buca",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 86,
                            Name = "Menderes",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 87,
                            Name = "Balçova",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 88,
                            Name = "Çiğli",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 89,
                            Name = "Gaziemir",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 90,
                            Name = "Narlıdere",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 91,
                            Name = "Güzelbahçe",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 92,
                            Name = "Bayraklı",
                            ProvinceId = 35
                        },
                        new
                        {
                            Id = 93,
                            Name = "Karabağlar",
                            ProvinceId = 35
                        });
                });

            modelBuilder.Entity("Domain.Entities.FindeksCreditRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerId");

                    b.Property<short>("Score")
                        .HasColumnType("smallint")
                        .HasColumnName("Score");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("FindeksCreditRates", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 3,
                            Score = (short)1480
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 3,
                            Score = (short)1300
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 1,
                            Score = (short)1150
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 2,
                            Score = (short)1600
                        });
                });

            modelBuilder.Entity("Domain.Entities.Fuel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Fuels", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Diesel"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Gasoline"
                        });
                });

            modelBuilder.Entity("Domain.Entities.IndividualCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<string>("NationalIdentity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NationalIdentity");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("IndividualCustomers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 4,
                            FirstName = "IndividualCustomer1",
                            LastName = "IndividualCustomer1",
                            NationalIdentity = "3333333331"
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 3,
                            FirstName = "IndividualCustomer2",
                            LastName = "IndividualCustomer2",
                            NationalIdentity = "1333333333"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 2, 17, 11, 12, 53, 16, DateTimeKind.Local).AddTicks(7807))
                        .HasColumnName("CreatedDate");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerId");

                    b.Property<DateTime?>("RentalEndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RentalEndDate");

                    b.Property<decimal>("RentalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("RentalPrice");

                    b.Property<DateTime>("RentalStartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RentalStartDate");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SerialNumber");

                    b.Property<short>("TotalRentalDay")
                        .HasColumnType("smallint")
                        .HasColumnName("TotalRentalDay");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 2, 17, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6320),
                            CustomerId = 1,
                            RentalEndDate = new DateTime(2022, 2, 22, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6322),
                            RentalPrice = 10000m,
                            RentalStartDate = new DateTime(2022, 2, 7, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6321),
                            SerialNumber = "1233210",
                            TotalRentalDay = (short)15
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 2, 17, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6336),
                            CustomerId = 3,
                            RentalEndDate = new DateTime(2022, 2, 14, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6339),
                            RentalPrice = 4500m,
                            RentalStartDate = new DateTime(2022, 2, 11, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6338),
                            SerialNumber = "2233211",
                            TotalRentalDay = (short)9
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 2, 17, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6348),
                            CustomerId = 2,
                            RentalEndDate = new DateTime(2022, 2, 7, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6349),
                            RentalPrice = 3600m,
                            RentalStartDate = new DateTime(2022, 1, 28, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6349),
                            SerialNumber = "3233212",
                            TotalRentalDay = (short)10
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 2, 17, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6407),
                            CustomerId = 4,
                            RentalEndDate = new DateTime(2022, 2, 14, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6409),
                            RentalPrice = 2900m,
                            RentalStartDate = new DateTime(2022, 2, 11, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6408),
                            SerialNumber = "4233213",
                            TotalRentalDay = (short)9
                        });
                });

            modelBuilder.Entity("Domain.Entities.Maintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Maintenances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            Description = "Findshield broken",
                            MaintenanceDate = new DateTime(2021, 11, 9, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6278),
                            ReturnDate = new DateTime(2021, 11, 29, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6279)
                        },
                        new
                        {
                            Id = 2,
                            CarId = 2,
                            Description = "Front hood rotten",
                            MaintenanceDate = new DateTime(2021, 12, 19, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6292),
                            ReturnDate = new DateTime(2021, 12, 22, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6292)
                        },
                        new
                        {
                            Id = 3,
                            CarId = 1,
                            Description = "engine overhear",
                            MaintenanceDate = new DateTime(2022, 1, 3, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6301),
                            ReturnDate = new DateTime(2022, 1, 23, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6302)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandId");

                    b.Property<double>("DailyPrice")
                        .HasColumnType("float")
                        .HasColumnName("DailyPrice");

                    b.Property<int>("FuelId")
                        .HasColumnType("int")
                        .HasColumnName("FuelId");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("TransmissionId")
                        .HasColumnType("int")
                        .HasColumnName("TransmissionId");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("FuelId");

                    b.HasIndex("TransmissionId");

                    b.ToTable("Models", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            DailyPrice = 500.0,
                            FuelId = 1,
                            ImageUrl = "",
                            Name = "Kangoo",
                            TransmissionId = 1
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            DailyPrice = 600.0,
                            FuelId = 1,
                            ImageUrl = "",
                            Name = "Clio",
                            TransmissionId = 1
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 2,
                            DailyPrice = 1000.0,
                            FuelId = 2,
                            ImageUrl = "",
                            Name = "Civic",
                            TransmissionId = 1
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            DailyPrice = 1200.0,
                            FuelId = 2,
                            ImageUrl = "",
                            Name = "Civic",
                            TransmissionId = 2
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 3,
                            DailyPrice = 1100.0,
                            FuelId = 1,
                            ImageUrl = "",
                            Name = "Corolla",
                            TransmissionId = 1
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 3,
                            DailyPrice = 900.0,
                            FuelId = 2,
                            ImageUrl = "",
                            Name = "Yaris",
                            TransmissionId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Provinces", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 0,
                            Name = "Adana"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 0,
                            Name = "Adıyaman"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 0,
                            Name = "Afyonkarahisar"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 0,
                            Name = "Ağrı"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 0,
                            Name = "Amasya"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 0,
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 0,
                            Name = "Antalya"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 0,
                            Name = "Artvin"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 0,
                            Name = "Aydın"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 0,
                            Name = "Balıkesir"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 0,
                            Name = "Bilecik"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 0,
                            Name = "Bingöl"
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 0,
                            Name = "Bitlis"
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 0,
                            Name = "Bolu"
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 0,
                            Name = "Burdur"
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 0,
                            Name = "Bursa"
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 0,
                            Name = "Çanakkale"
                        },
                        new
                        {
                            Id = 18,
                            CountryId = 0,
                            Name = "Çankırı"
                        },
                        new
                        {
                            Id = 19,
                            CountryId = 0,
                            Name = "Çorum"
                        },
                        new
                        {
                            Id = 20,
                            CountryId = 0,
                            Name = "Denizli"
                        },
                        new
                        {
                            Id = 21,
                            CountryId = 0,
                            Name = "Diyarbakır"
                        },
                        new
                        {
                            Id = 22,
                            CountryId = 0,
                            Name = "Edirne"
                        },
                        new
                        {
                            Id = 23,
                            CountryId = 0,
                            Name = "Elazığ"
                        },
                        new
                        {
                            Id = 24,
                            CountryId = 0,
                            Name = "Erzincan"
                        },
                        new
                        {
                            Id = 25,
                            CountryId = 0,
                            Name = "Erzurum"
                        },
                        new
                        {
                            Id = 26,
                            CountryId = 0,
                            Name = "Eskişehir"
                        },
                        new
                        {
                            Id = 27,
                            CountryId = 0,
                            Name = "Gaziantep"
                        },
                        new
                        {
                            Id = 28,
                            CountryId = 0,
                            Name = "Giresun"
                        },
                        new
                        {
                            Id = 29,
                            CountryId = 0,
                            Name = "Gümüşhane"
                        },
                        new
                        {
                            Id = 30,
                            CountryId = 0,
                            Name = "Hakkari"
                        },
                        new
                        {
                            Id = 31,
                            CountryId = 0,
                            Name = "Hatay"
                        },
                        new
                        {
                            Id = 32,
                            CountryId = 0,
                            Name = "Isparta"
                        },
                        new
                        {
                            Id = 33,
                            CountryId = 0,
                            Name = "Mersin"
                        },
                        new
                        {
                            Id = 34,
                            CountryId = 0,
                            Name = "İstanbul"
                        },
                        new
                        {
                            Id = 35,
                            CountryId = 0,
                            Name = "İzmir"
                        },
                        new
                        {
                            Id = 36,
                            CountryId = 0,
                            Name = "Kars"
                        },
                        new
                        {
                            Id = 37,
                            CountryId = 0,
                            Name = "Kastamonu"
                        },
                        new
                        {
                            Id = 38,
                            CountryId = 0,
                            Name = "Kayseri"
                        },
                        new
                        {
                            Id = 39,
                            CountryId = 0,
                            Name = "Kırklareli"
                        },
                        new
                        {
                            Id = 40,
                            CountryId = 0,
                            Name = "Kırşehir"
                        },
                        new
                        {
                            Id = 41,
                            CountryId = 0,
                            Name = "Kocaeli"
                        },
                        new
                        {
                            Id = 42,
                            CountryId = 0,
                            Name = "Konya"
                        },
                        new
                        {
                            Id = 43,
                            CountryId = 0,
                            Name = "Kütahya"
                        },
                        new
                        {
                            Id = 44,
                            CountryId = 0,
                            Name = "Malatya"
                        },
                        new
                        {
                            Id = 45,
                            CountryId = 0,
                            Name = "Manisa"
                        },
                        new
                        {
                            Id = 46,
                            CountryId = 0,
                            Name = "Kahramanmaraş"
                        },
                        new
                        {
                            Id = 47,
                            CountryId = 0,
                            Name = "Mardin"
                        },
                        new
                        {
                            Id = 48,
                            CountryId = 0,
                            Name = "Muğla"
                        },
                        new
                        {
                            Id = 49,
                            CountryId = 0,
                            Name = "Muş"
                        },
                        new
                        {
                            Id = 50,
                            CountryId = 0,
                            Name = "Nevşehir"
                        },
                        new
                        {
                            Id = 51,
                            CountryId = 0,
                            Name = "Niğde"
                        },
                        new
                        {
                            Id = 52,
                            CountryId = 0,
                            Name = "Ordu"
                        },
                        new
                        {
                            Id = 53,
                            CountryId = 0,
                            Name = "Rize"
                        },
                        new
                        {
                            Id = 54,
                            CountryId = 0,
                            Name = "Sakarya"
                        },
                        new
                        {
                            Id = 55,
                            CountryId = 0,
                            Name = "Samsun"
                        },
                        new
                        {
                            Id = 56,
                            CountryId = 0,
                            Name = "Siirt"
                        },
                        new
                        {
                            Id = 57,
                            CountryId = 0,
                            Name = "Sinop"
                        },
                        new
                        {
                            Id = 58,
                            CountryId = 0,
                            Name = "Sivas"
                        },
                        new
                        {
                            Id = 59,
                            CountryId = 0,
                            Name = "Tekirdağ"
                        },
                        new
                        {
                            Id = 60,
                            CountryId = 0,
                            Name = "Tokat"
                        },
                        new
                        {
                            Id = 61,
                            CountryId = 0,
                            Name = "Trabzon"
                        },
                        new
                        {
                            Id = 62,
                            CountryId = 0,
                            Name = "Tunceli"
                        },
                        new
                        {
                            Id = 63,
                            CountryId = 0,
                            Name = "Şanlıurfa"
                        },
                        new
                        {
                            Id = 64,
                            CountryId = 0,
                            Name = "Uşak"
                        },
                        new
                        {
                            Id = 65,
                            CountryId = 0,
                            Name = "Van"
                        },
                        new
                        {
                            Id = 66,
                            CountryId = 0,
                            Name = "Yozgat"
                        },
                        new
                        {
                            Id = 67,
                            CountryId = 0,
                            Name = "Zonguldak"
                        },
                        new
                        {
                            Id = 68,
                            CountryId = 0,
                            Name = "Aksaray"
                        },
                        new
                        {
                            Id = 69,
                            CountryId = 0,
                            Name = "Bayburt"
                        },
                        new
                        {
                            Id = 70,
                            CountryId = 0,
                            Name = "Karaman"
                        },
                        new
                        {
                            Id = 71,
                            CountryId = 0,
                            Name = "Kırıkkale"
                        },
                        new
                        {
                            Id = 72,
                            CountryId = 0,
                            Name = "Batman"
                        },
                        new
                        {
                            Id = 73,
                            CountryId = 0,
                            Name = "Şırnak"
                        },
                        new
                        {
                            Id = 74,
                            CountryId = 0,
                            Name = "Bartın"
                        },
                        new
                        {
                            Id = 75,
                            CountryId = 0,
                            Name = "Ardahan"
                        },
                        new
                        {
                            Id = 76,
                            CountryId = 0,
                            Name = "Iğdır"
                        },
                        new
                        {
                            Id = 77,
                            CountryId = 0,
                            Name = "Yalova"
                        },
                        new
                        {
                            Id = 78,
                            CountryId = 0,
                            Name = "Karabük"
                        },
                        new
                        {
                            Id = 79,
                            CountryId = 0,
                            Name = "Kilis"
                        },
                        new
                        {
                            Id = 80,
                            CountryId = 0,
                            Name = "Osmaniye"
                        },
                        new
                        {
                            Id = 81,
                            CountryId = 0,
                            Name = "Düzce"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("CarId");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerId");

                    b.Property<DateTime?>("RentalEndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RentalEndDate");

                    b.Property<int?>("RentalEndKilometer")
                        .HasColumnType("int")
                        .HasColumnName("RentalEndKilometer");

                    b.Property<int?>("RentalEndOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("RentalEndOfficeId");

                    b.Property<DateTime>("RentalStartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RentalStartDate");

                    b.Property<int>("RentalStartKilometer")
                        .HasColumnType("int")
                        .HasColumnName("RentalStartKilometer");

                    b.Property<int>("RentalStartOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("RentalStartOfficeId");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ReturnDate");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RentalEndOfficeId");

                    b.HasIndex("RentalStartOfficeId");

                    b.ToTable("Rentals", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 2,
                            CustomerId = 1,
                            RentalEndDate = new DateTime(2022, 2, 22, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6171),
                            RentalEndKilometer = 13400,
                            RentalEndOfficeId = 1,
                            RentalStartDate = new DateTime(2022, 2, 7, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6160),
                            RentalStartKilometer = 12300,
                            RentalStartOfficeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CarId = 1,
                            CustomerId = 3,
                            RentalEndDate = new DateTime(2022, 2, 14, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6192),
                            RentalEndKilometer = 57100,
                            RentalEndOfficeId = 1,
                            RentalStartDate = new DateTime(2022, 2, 11, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6191),
                            RentalStartKilometer = 54500,
                            RentalStartOfficeId = 2,
                            ReturnDate = new DateTime(2022, 2, 17, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6193)
                        },
                        new
                        {
                            Id = 3,
                            CarId = 3,
                            CustomerId = 2,
                            RentalEndDate = new DateTime(2022, 2, 7, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6203),
                            RentalEndKilometer = 53400,
                            RentalEndOfficeId = 1,
                            RentalStartDate = new DateTime(2022, 1, 28, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6203),
                            RentalStartKilometer = 52300,
                            RentalStartOfficeId = 1
                        },
                        new
                        {
                            Id = 4,
                            CarId = 1,
                            CustomerId = 4,
                            RentalEndDate = new DateTime(2022, 2, 14, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6214),
                            RentalEndKilometer = 41400,
                            RentalEndOfficeId = 1,
                            RentalStartDate = new DateTime(2022, 2, 11, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6213),
                            RentalStartKilometer = 39500,
                            RentalStartOfficeId = 2,
                            ReturnDate = new DateTime(2022, 2, 17, 11, 12, 53, 17, DateTimeKind.Local).AddTicks(6215)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Transmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Transmissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Manuel"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Auto"
                        });
                });

            modelBuilder.Entity("RentalOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("DistrictId");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("RentalOffices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DistrictId = 6
                        },
                        new
                        {
                            Id = 2,
                            DistrictId = 15
                        },
                        new
                        {
                            Id = 3,
                            DistrictId = 25
                        },
                        new
                        {
                            Id = 4,
                            DistrictId = 35
                        },
                        new
                        {
                            Id = 5,
                            DistrictId = 45
                        });
                });

            modelBuilder.Entity("Core.Security.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Core.Security.Entities.OperationClaim", "OperationClaim")
                        .WithMany()
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Security.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Car", b =>
                {
                    b.HasOne("Domain.Entities.Color", "Color")
                        .WithMany("Cars")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Model", "Model")
                        .WithMany("Cars")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentalOffice", "RentalOffice")
                        .WithMany("Cars")
                        .HasForeignKey("RentalOfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Model");

                    b.Navigation("RentalOffice");
                });

            modelBuilder.Entity("Domain.Entities.CarDamage", b =>
                {
                    b.HasOne("Domain.Entities.Car", "Car")
                        .WithMany("CarDamages")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Domain.Entities.CorporateCustomer", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithOne("CorporateCustomer")
                        .HasForeignKey("Domain.Entities.CorporateCustomer", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.District", b =>
                {
                    b.HasOne("Domain.Entities.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Domain.Entities.FindeksCreditRate", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithOne("FindeksCreditRate")
                        .HasForeignKey("Domain.Entities.FindeksCreditRate", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.IndividualCustomer", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithOne("IndividualCustomer")
                        .HasForeignKey("Domain.Entities.IndividualCustomer", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Maintenance", b =>
                {
                    b.HasOne("Domain.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Domain.Entities.Model", b =>
                {
                    b.HasOne("Domain.Entities.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Fuel", "Fuel")
                        .WithMany("Models")
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Transmission", "Transmission")
                        .WithMany("Models")
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Fuel");

                    b.Navigation("Transmission");
                });

            modelBuilder.Entity("Domain.Entities.Province", b =>
                {
                    b.HasOne("Domain.Entities.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Entities.Rental", b =>
                {
                    b.HasOne("Domain.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentalOffice", "RentalEndOffice")
                        .WithMany()
                        .HasForeignKey("RentalEndOfficeId");

                    b.HasOne("RentalOffice", "RentalStartOffice")
                        .WithMany()
                        .HasForeignKey("RentalStartOfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");

                    b.Navigation("RentalEndOffice");

                    b.Navigation("RentalStartOffice");
                });

            modelBuilder.Entity("RentalOffice", b =>
                {
                    b.HasOne("Domain.Entities.District", "Districts")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("Domain.Entities.Car", b =>
                {
                    b.Navigation("CarDamages");
                });

            modelBuilder.Entity("Domain.Entities.Color", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("CorporateCustomer");

                    b.Navigation("FindeksCreditRate");

                    b.Navigation("IndividualCustomer");

                    b.Navigation("Invoices");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("Domain.Entities.Fuel", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("Domain.Entities.Model", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Domain.Entities.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Domain.Entities.Transmission", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("RentalOffice", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
