// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    partial class BaseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Security.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "moderator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "user"
                        });
                });

            modelBuilder.Entity("Core.Security.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordSalt");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Core.Security.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int")
                        .HasColumnName("OperationClaimId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Renault"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Honda"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Toyota"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarState")
                        .HasColumnType("int")
                        .HasColumnName("State");

                    b.Property<int>("City")
                        .HasColumnType("int")
                        .HasColumnName("City");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("ColorId");

                    b.Property<int>("Kilometer")
                        .HasColumnType("int")
                        .HasColumnName("Kilometer");

                    b.Property<short>("MinFindeksCreditRate")
                        .HasColumnType("smallint");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("ModelId");

                    b.Property<short>("ModelYear")
                        .HasColumnType("smallint")
                        .HasColumnName("ModelYear");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Plate");

                    b.Property<int>("RentalOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("RentalOfficeId");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ModelId");

                    b.HasIndex("RentalOfficeId");

                    b.ToTable("Cars", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarState = 1,
                            City = 6,
                            ColorId = 1,
                            Kilometer = 100000,
                            MinFindeksCreditRate = (short)1500,
                            ModelId = 1,
                            ModelYear = (short)2005,
                            Plate = "05avv03",
                            RentalOfficeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CarState = 1,
                            City = 6,
                            ColorId = 2,
                            Kilometer = 200000,
                            MinFindeksCreditRate = (short)1300,
                            ModelId = 1,
                            ModelYear = (short)2004,
                            Plate = "05abb03",
                            RentalOfficeId = 2
                        },
                        new
                        {
                            Id = 3,
                            CarState = 1,
                            City = 34,
                            ColorId = 1,
                            Kilometer = 300000,
                            MinFindeksCreditRate = (short)1400,
                            ModelId = 1,
                            ModelYear = (short)2006,
                            Plate = "05acc03",
                            RentalOfficeId = 1
                        },
                        new
                        {
                            Id = 4,
                            CarState = 1,
                            City = 34,
                            ColorId = 3,
                            Kilometer = 300000,
                            MinFindeksCreditRate = (short)1400,
                            ModelId = 2,
                            ModelYear = (short)2006,
                            Plate = "05acc03",
                            RentalOfficeId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.CarDamage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("CarId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsFixed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsFixed");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarDamages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            Description = "Engine Overheat",
                            IsFixed = true
                        },
                        new
                        {
                            Id = 2,
                            CarId = 3,
                            Description = "Front panel broken",
                            IsFixed = true
                        },
                        new
                        {
                            Id = 3,
                            CarId = 3,
                            Description = "Engine oil is changed",
                            IsFixed = true
                        },
                        new
                        {
                            Id = 4,
                            CarId = 2,
                            Description = "Brake pads changed",
                            IsFixed = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Colors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Gray"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CorporateCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyName");

                    b.Property<string>("CompanyShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerId");

                    b.Property<string>("TaxNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TaxNo");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CorporateCustomers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "CorporateCustomer1",
                            CompanyShortName = "",
                            CustomerId = 2,
                            TaxNo = "1233213123"
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "CorporateCustomer2",
                            CompanyShortName = "ab2",
                            CustomerId = 1,
                            TaxNo = "1233213214"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContactEmail");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContactNumber");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactEmail = "burakibrahim@gmail1.com",
                            ContactNumber = "123456789"
                        },
                        new
                        {
                            Id = 2,
                            ContactEmail = "burakibrahim@gmail2.com",
                            ContactNumber = "223456781"
                        },
                        new
                        {
                            Id = 3,
                            ContactEmail = "burakibrahim@gmail3.com",
                            ContactNumber = "323000789"
                        },
                        new
                        {
                            Id = 4,
                            ContactEmail = "burakibrahim@gmail4.com",
                            ContactNumber = "423666781"
                        });
                });

            modelBuilder.Entity("Domain.Entities.FindeksCreditRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerId");

                    b.Property<short>("Score")
                        .HasColumnType("smallint")
                        .HasColumnName("Score");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("FindeksCreditRates", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Score = (short)1200
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            Score = (short)1300
                        });
                });

            modelBuilder.Entity("Domain.Entities.Fuel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Fuels", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Diesel"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Gasoline"
                        });
                });

            modelBuilder.Entity("Domain.Entities.IndividualCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<string>("NationalIdentity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NationalIdentity");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("IndividualCustomers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 4,
                            FirstName = "IndividualCustomer1",
                            LastName = "IndividualCustomer1",
                            NationalIdentity = "3333333331"
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 3,
                            FirstName = "IndividualCustomer2",
                            LastName = "IndividualCustomer2",
                            NationalIdentity = "1333333333"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 2, 16, 10, 26, 49, 393, DateTimeKind.Local).AddTicks(5010))
                        .HasColumnName("CreatedDate");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerId");

                    b.Property<DateTime?>("RentalEndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RentalEndDate");

                    b.Property<decimal>("RentalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("RentalPrice");

                    b.Property<DateTime>("RentalStartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RentalStartDate");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SerialNumber");

                    b.Property<short>("TotalRentalDay")
                        .HasColumnType("smallint")
                        .HasColumnName("TotalRentalDay");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 2, 16, 10, 26, 49, 394, DateTimeKind.Local).AddTicks(209),
                            CustomerId = 1,
                            RentalEndDate = new DateTime(2022, 2, 21, 10, 26, 49, 394, DateTimeKind.Local).AddTicks(211),
                            RentalPrice = 10000m,
                            RentalStartDate = new DateTime(2022, 2, 6, 10, 26, 49, 394, DateTimeKind.Local).AddTicks(210),
                            SerialNumber = "1233210",
                            TotalRentalDay = (short)15
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 2, 16, 10, 26, 49, 394, DateTimeKind.Local).AddTicks(239),
                            CustomerId = 3,
                            RentalEndDate = new DateTime(2022, 2, 13, 10, 26, 49, 394, DateTimeKind.Local).AddTicks(241),
                            RentalPrice = 4500m,
                            RentalStartDate = new DateTime(2022, 2, 10, 10, 26, 49, 394, DateTimeKind.Local).AddTicks(240),
                            SerialNumber = "2233211",
                            TotalRentalDay = (short)9
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 2, 16, 10, 26, 49, 394, DateTimeKind.Local).AddTicks(256),
                            CustomerId = 2,
                            RentalEndDate = new DateTime(2022, 2, 6, 10, 26, 49, 394, DateTimeKind.Local).AddTicks(258),
                            RentalPrice = 3600m,
                            RentalStartDate = new DateTime(2022, 1, 27, 10, 26, 49, 394, DateTimeKind.Local).AddTicks(257),
                            SerialNumber = "3233212",
                            TotalRentalDay = (short)10
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 2, 16, 10, 26, 49, 394, DateTimeKind.Local).AddTicks(276),
                            CustomerId = 4,
                            RentalEndDate = new DateTime(2022, 2, 13, 10, 26, 49, 394, DateTimeKind.Local).AddTicks(279),
                            RentalPrice = 2900m,
                            RentalStartDate = new DateTime(2022, 2, 10, 10, 26, 49, 394, DateTimeKind.Local).AddTicks(277),
                            SerialNumber = "4233213",
                            TotalRentalDay = (short)9
                        });
                });

            modelBuilder.Entity("Domain.Entities.Maintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Maintenances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            Description = "Findshield broken",
                            MaintenanceDate = new DateTime(2021, 11, 8, 10, 26, 49, 394, DateTimeKind.Local).AddTicks(137),
                            ReturnDate = new DateTime(2021, 11, 28, 10, 26, 49, 394, DateTimeKind.Local).AddTicks(141)
                        },
                        new
                        {
                            Id = 2,
                            CarId = 2,
                            Description = "Front hood rotten",
                            MaintenanceDate = new DateTime(2021, 12, 18, 10, 26, 49, 394, DateTimeKind.Local).AddTicks(168),
                            ReturnDate = new DateTime(2021, 12, 21, 10, 26, 49, 394, DateTimeKind.Local).AddTicks(169)
                        },
                        new
                        {
                            Id = 3,
                            CarId = 1,
                            Description = "engine overhear",
                            MaintenanceDate = new DateTime(2022, 1, 2, 10, 26, 49, 394, DateTimeKind.Local).AddTicks(185),
                            ReturnDate = new DateTime(2022, 1, 22, 10, 26, 49, 394, DateTimeKind.Local).AddTicks(187)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandId");

                    b.Property<double>("DailyPrice")
                        .HasColumnType("float")
                        .HasColumnName("DailyPrice");

                    b.Property<int>("FuelId")
                        .HasColumnType("int")
                        .HasColumnName("FuelId");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("TransmissionId")
                        .HasColumnType("int")
                        .HasColumnName("TransmissionId");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("FuelId");

                    b.HasIndex("TransmissionId");

                    b.ToTable("Models", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            DailyPrice = 500.0,
                            FuelId = 1,
                            ImageUrl = "",
                            Name = "Kangoo",
                            TransmissionId = 1
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            DailyPrice = 600.0,
                            FuelId = 1,
                            ImageUrl = "",
                            Name = "Clio",
                            TransmissionId = 1
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 2,
                            DailyPrice = 1000.0,
                            FuelId = 2,
                            ImageUrl = "",
                            Name = "Civic",
                            TransmissionId = 1
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            DailyPrice = 1200.0,
                            FuelId = 2,
                            ImageUrl = "",
                            Name = "Civic",
                            TransmissionId = 2
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 3,
                            DailyPrice = 1100.0,
                            FuelId = 1,
                            ImageUrl = "",
                            Name = "Corolla",
                            TransmissionId = 1
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 3,
                            DailyPrice = 900.0,
                            FuelId = 2,
                            ImageUrl = "",
                            Name = "Yaris",
                            TransmissionId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("CarId");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerId");

                    b.Property<DateTime?>("RentalEndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RentalEndDate");

                    b.Property<int?>("RentalEndKilometer")
                        .HasColumnType("int")
                        .HasColumnName("RentalEndKilometer");

                    b.Property<int?>("RentalEndOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("RentalEndOfficeId");

                    b.Property<DateTime>("RentalStartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RentalStartDate");

                    b.Property<int>("RentalStartKilometer")
                        .HasColumnType("int")
                        .HasColumnName("RentalStartKilometer");

                    b.Property<int>("RentalStartOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("RentalStartOfficeId");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ReturnDate");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RentalEndOfficeId");

                    b.HasIndex("RentalStartOfficeId");

                    b.ToTable("Rentals", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 2,
                            CustomerId = 1,
                            RentalEndDate = new DateTime(2022, 2, 21, 10, 26, 49, 393, DateTimeKind.Local).AddTicks(9801),
                            RentalEndKilometer = 13400,
                            RentalEndOfficeId = 1,
                            RentalStartDate = new DateTime(2022, 2, 6, 10, 26, 49, 393, DateTimeKind.Local).AddTicks(9789),
                            RentalStartKilometer = 12300,
                            RentalStartOfficeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CarId = 1,
                            CustomerId = 3,
                            RentalEndDate = new DateTime(2022, 2, 13, 10, 26, 49, 393, DateTimeKind.Local).AddTicks(9831),
                            RentalEndKilometer = 57100,
                            RentalEndOfficeId = 1,
                            RentalStartDate = new DateTime(2022, 2, 10, 10, 26, 49, 393, DateTimeKind.Local).AddTicks(9830),
                            RentalStartKilometer = 54500,
                            RentalStartOfficeId = 2,
                            ReturnDate = new DateTime(2022, 2, 16, 10, 26, 49, 393, DateTimeKind.Local).AddTicks(9832)
                        },
                        new
                        {
                            Id = 3,
                            CarId = 3,
                            CustomerId = 2,
                            RentalEndDate = new DateTime(2022, 2, 6, 10, 26, 49, 393, DateTimeKind.Local).AddTicks(9859),
                            RentalEndKilometer = 53400,
                            RentalEndOfficeId = 1,
                            RentalStartDate = new DateTime(2022, 1, 27, 10, 26, 49, 393, DateTimeKind.Local).AddTicks(9857),
                            RentalStartKilometer = 52300,
                            RentalStartOfficeId = 1
                        },
                        new
                        {
                            Id = 4,
                            CarId = 1,
                            CustomerId = 4,
                            RentalEndDate = new DateTime(2022, 2, 13, 10, 26, 49, 393, DateTimeKind.Local).AddTicks(9883),
                            RentalEndKilometer = 41400,
                            RentalEndOfficeId = 1,
                            RentalStartDate = new DateTime(2022, 2, 10, 10, 26, 49, 393, DateTimeKind.Local).AddTicks(9881),
                            RentalStartKilometer = 39500,
                            RentalStartOfficeId = 2,
                            ReturnDate = new DateTime(2022, 2, 16, 10, 26, 49, 393, DateTimeKind.Local).AddTicks(9884)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Transmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Transmissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Manuel"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Auto"
                        });
                });

            modelBuilder.Entity("RentalOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("City")
                        .HasColumnType("int")
                        .HasColumnName("City");

                    b.Property<string>("OfficeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RentalOffices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = 6,
                            OfficeName = "Mamak"
                        },
                        new
                        {
                            Id = 2,
                            City = 6,
                            OfficeName = "Kızlay"
                        },
                        new
                        {
                            Id = 3,
                            City = 35,
                            OfficeName = "Gaziemir"
                        },
                        new
                        {
                            Id = 4,
                            City = 34,
                            OfficeName = "Pendik"
                        },
                        new
                        {
                            Id = 5,
                            City = 6,
                            OfficeName = "Tandoğan"
                        });
                });

            modelBuilder.Entity("Core.Security.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Core.Security.Entities.OperationClaim", "OperationClaim")
                        .WithMany()
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Security.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Car", b =>
                {
                    b.HasOne("Domain.Entities.Color", "Color")
                        .WithMany("Cars")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Model", "Model")
                        .WithMany("Cars")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentalOffice", "RentalOffice")
                        .WithMany("Cars")
                        .HasForeignKey("RentalOfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Model");

                    b.Navigation("RentalOffice");
                });

            modelBuilder.Entity("Domain.Entities.CarDamage", b =>
                {
                    b.HasOne("Domain.Entities.Car", "Car")
                        .WithMany("CarDamages")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Domain.Entities.CorporateCustomer", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithOne("CorporateCustomer")
                        .HasForeignKey("Domain.Entities.CorporateCustomer", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.FindeksCreditRate", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithOne("FindeksCreditRate")
                        .HasForeignKey("Domain.Entities.FindeksCreditRate", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.IndividualCustomer", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithOne("IndividualCustomer")
                        .HasForeignKey("Domain.Entities.IndividualCustomer", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Maintenance", b =>
                {
                    b.HasOne("Domain.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Domain.Entities.Model", b =>
                {
                    b.HasOne("Domain.Entities.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Fuel", "Fuel")
                        .WithMany("Models")
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Transmission", "Transmission")
                        .WithMany("Models")
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Fuel");

                    b.Navigation("Transmission");
                });

            modelBuilder.Entity("Domain.Entities.Rental", b =>
                {
                    b.HasOne("Domain.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentalOffice", "RentalEndOffice")
                        .WithMany()
                        .HasForeignKey("RentalEndOfficeId");

                    b.HasOne("RentalOffice", "RentalStartOffice")
                        .WithMany()
                        .HasForeignKey("RentalStartOfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");

                    b.Navigation("RentalEndOffice");

                    b.Navigation("RentalStartOffice");
                });

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("Domain.Entities.Car", b =>
                {
                    b.Navigation("CarDamages");
                });

            modelBuilder.Entity("Domain.Entities.Color", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("CorporateCustomer");

                    b.Navigation("FindeksCreditRate");

                    b.Navigation("IndividualCustomer");

                    b.Navigation("Invoices");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("Domain.Entities.Fuel", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("Domain.Entities.Model", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Domain.Entities.Transmission", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("RentalOffice", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
